import type { Snippet } from 'svelte';
import type { SinaPlugin } from './plugins.svelte.js';
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import('svelte').ComponentConstructorOptions<Props>): import('svelte').SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
/**
 * ## Multi Provider
 *
 * Centralized location for provider stores and shared default plugins.
 *
 * Properties  | Description
 * ------------|---
 * `providers` | Array of root level stores.
 * `plugins`   | Shared default plugins.
 */
declare const MultiProvider: $$__sveltets_2_IsomorphicComponent<{
    children?: Snippet;
    providers: (() => void)[];
    plugins?: SinaPlugin<object>[];
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, "">;
type MultiProvider = InstanceType<typeof MultiProvider>;
export default MultiProvider;
