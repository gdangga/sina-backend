import type { SinaPlugin } from './plugins.svelte.js';
export interface Store {
    /** Debug label */
    $label?: string;
    /**
     * Cleanup code that executes when the provider store is unmounted from the
     * component tree.
     */
    $cleanup?: () => void;
}
interface Setup<T extends Store & object> {
    new (): T;
}
/**
 * Create a reactive data store factory.
 *
 * The initial state of the data store should be described using the anonymous
 * class declaration syntax inside a `.svelte.ts` file. All features pertaining
 * to Svelte and ES6 classes are available and highly encouraged.
 *
 * Autocompletion for optional store APIs can be implemented by importing the
 * `Hooks` type and declaring `class implements Hooks`
 *
 * @param setup Anonymous class declaration describing the initial state.
 * @param plugins An array of `SinaPlugin`s.
 */
export declare const store: <T extends object & Store>(setup: Setup<T>, plugins?: SinaPlugin<object>[]) => (label?: string) => { [K in keyof T]: T[K]; };
/**
 * Utility function to label provider stores in `<MultiProvider />` components.
 *
 * @example
 * ```svelte
 * <script lang="ts">
 *   import { MultiProvider, provider } from "sina";
 *   import { useCounterStore } from "./stores/counter.ts";
 * </script>
 *
 * <MultiProvider providers={[provider`counter`(useCounterStore)]} />
 * ```
 */
export declare const provider: (template: TemplateStringsArray) => (provider: (label?: string) => void) => () => void;
export {};
